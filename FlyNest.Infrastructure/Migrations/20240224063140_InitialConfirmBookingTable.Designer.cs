// <auto-generated />
using System;
using FlyNest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlyNest.Infrastructure.Migrations
{
    [DbContext(typeof(FlyNestDbContext))]
    [Migration("20240224063140_InitialConfirmBookingTable")]
    partial class InitialConfirmBookingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Airline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AirlineName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("EstablishedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Airline", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AirlineName = "Biman Bangladesh Airlines",
                            ContactInfo = "Balaka Bhaban Kurmitola, Dhaka, Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 572, DateTimeKind.Unspecified).AddTicks(9053), new TimeSpan(0, 6, 0, 0, 0)),
                            EstablishedDate = new DateOnly(1, 1, 1),
                            IsDelete = false,
                            UpdateNo = 0,
                            Website = "http://biman-airlines.com"
                        },
                        new
                        {
                            Id = 2L,
                            AirlineName = "US-Bangla Airlines",
                            ContactInfo = "77 Sohrawardi Avenue, Baridhara Diplomatic Zone, Dhaka, Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 572, DateTimeKind.Unspecified).AddTicks(9093), new TimeSpan(0, 6, 0, 0, 0)),
                            EstablishedDate = new DateOnly(1, 1, 1),
                            IsDelete = false,
                            UpdateNo = 0,
                            Website = "https://usbair.com"
                        },
                        new
                        {
                            Id = 3L,
                            AirlineName = "Novoair",
                            ContactInfo = "House-50, Road-11, Block-F, Banani, Dhaka, Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 572, DateTimeKind.Unspecified).AddTicks(9096), new TimeSpan(0, 6, 0, 0, 0)),
                            EstablishedDate = new DateOnly(1, 1, 1),
                            IsDelete = false,
                            UpdateNo = 0,
                            Website = "https://www.flynovoair.com"
                        },
                        new
                        {
                            Id = 4L,
                            AirlineName = "Regent Airways",
                            ContactInfo = "Balaka Bhaban Kurmitola, Dhaka, Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 572, DateTimeKind.Unspecified).AddTicks(9097), new TimeSpan(0, 6, 0, 0, 0)),
                            EstablishedDate = new DateOnly(1, 1, 1),
                            IsDelete = false,
                            UpdateNo = 0,
                            Website = "http://biman-airlines.com"
                        });
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Airport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CityName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Airport", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityName = "Dhaka",
                            Code = "DAC",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(2998), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Hazrat Shahjalal International Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 2L,
                            CityName = "Chattogram",
                            Code = "CGP",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3015), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Shah Amanat International Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 3L,
                            CityName = "Jashore",
                            Code = "JSR",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3017), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Jashore Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 4L,
                            CityName = "Sylhet",
                            Code = "ZYL",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3019), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Osmany International Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 5L,
                            CityName = "Comilla",
                            Code = "CLA",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3021), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Comilla Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 6L,
                            CityName = "Ishurdi",
                            Code = "IRD",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3023), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Ishurdi Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 7L,
                            CityName = "Cox's Bazar",
                            Code = "CXB",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3025), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Cox's Bazar Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 8L,
                            CityName = "Saidpur",
                            Code = "SPD",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3027), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Saidpur Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 9L,
                            CityName = "Rajshahi",
                            Code = "RJH",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3029), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Shah Makhdum Airport",
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 10L,
                            CityName = "Barishal",
                            Code = "BZL",
                            CountryName = "Bangladesh",
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 573, DateTimeKind.Unspecified).AddTicks(3031), new TimeSpan(0, 6, 0, 0, 0)),
                            IsDelete = false,
                            Name = "Barishal Airport",
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Baggage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FlightClass")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("LuggageWeight")
                        .HasColumnType("float");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Baggage", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightClass = "Economy",
                            IsDelete = false,
                            LuggageWeight = 20.0,
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.ConfirmBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientEmail")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("PackagePrice")
                        .HasColumnType("float");

                    b.Property<string>("PackageTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalPerson")
                        .HasColumnType("int");

                    b.Property<long>("TourPackageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TramAndCondition")
                        .HasColumnType("bit");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourPackageId");

                    b.ToTable("ConfirmBooking", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Flight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AircraftType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("AirlineId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArrivalAirportId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("ArrivalDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<long>("BaggageId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("DepatureAirportId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DepatureDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("DepatureTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("FlightDuration")
                        .HasMaxLength(30)
                        .HasColumnType("time");

                    b.Property<string>("FlightNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FlightType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("BaggageId");

                    b.HasIndex("DepatureAirportId");

                    b.ToTable("Flight", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 1L,
                            ArrivalAirportId = 7L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(14, 0, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5338), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 1L,
                            DepatureDate = new DateOnly(2024, 1, 1),
                            DepatureTime = new TimeOnly(11, 0, 0),
                            FlightDuration = new TimeSpan(0, 3, 0, 0, 0),
                            FlightNo = "BG433",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 2L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 2L,
                            ArrivalAirportId = 7L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(14, 0, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5386), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 1L,
                            DepatureDate = new DateOnly(2024, 1, 1),
                            DepatureTime = new TimeOnly(11, 0, 0),
                            FlightDuration = new TimeSpan(0, 3, 0, 0, 0),
                            FlightNo = "BS141",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 3L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 3L,
                            ArrivalAirportId = 7L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(13, 30, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5390), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 1L,
                            DepatureDate = new DateOnly(2024, 1, 1),
                            DepatureTime = new TimeOnly(11, 0, 0),
                            FlightDuration = new TimeSpan(0, 2, 30, 0, 0),
                            FlightNo = "VQ927",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 4L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 3L,
                            ArrivalAirportId = 1L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(19, 0, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5393), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 7L,
                            DepatureDate = new DateOnly(2024, 1, 5),
                            DepatureTime = new TimeOnly(16, 30, 0),
                            FlightDuration = new TimeSpan(0, 2, 30, 0, 0),
                            FlightNo = "VQ729",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 5L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 2L,
                            ArrivalAirportId = 1L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(19, 0, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5396), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 7L,
                            DepatureDate = new DateOnly(2024, 1, 5),
                            DepatureTime = new TimeOnly(16, 30, 0),
                            FlightDuration = new TimeSpan(0, 3, 0, 0, 0),
                            FlightNo = "BS241",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        },
                        new
                        {
                            Id = 6L,
                            AircraftType = "B 787-8 Dreamliner",
                            AirlineId = 1L,
                            ArrivalAirportId = 1L,
                            ArrivalDate = new DateOnly(2024, 1, 1),
                            ArrivalTime = new TimeOnly(19, 0, 0),
                            BaggageId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 2, 24, 12, 31, 37, 591, DateTimeKind.Unspecified).AddTicks(5400), new TimeSpan(0, 6, 0, 0, 0)),
                            DepatureAirportId = 7L,
                            DepatureDate = new DateOnly(2024, 1, 5),
                            DepatureTime = new TimeOnly(16, 30, 0),
                            FlightDuration = new TimeSpan(0, 3, 0, 0, 0),
                            FlightNo = "BG333",
                            FlightType = "Non-Stop",
                            IsDelete = false,
                            Price = 5600.0,
                            UpdateNo = 0
                        });
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.FlightReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeContact")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ArrivalCity")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int?>("Child")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DepartureCity")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("FlightClass")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FlightType")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<int?>("Infants")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FlightReservation", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LocationMap")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<double>("PriceStartFrom")
                        .HasColumnType("float");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hotel", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.HotelImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<string>("HotelImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.HotelReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeContact")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Child")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PreferenceHotel")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Status")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HotelReservation", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.ImageSlider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ImageSlider", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Policy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Policy", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Benefits")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Facilities")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<double>("PriceParNight")
                        .HasColumnType("float");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.RoomImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoomImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Stopover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AirportId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("StopoverDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StopoverTime")
                        .HasColumnType("time");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("FlightId");

                    b.ToTable("Stopover", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.TourPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("PackagePrice")
                        .HasColumnType("float");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TourDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UpdateNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("TourPackage", (string)null);
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.ConfirmBooking", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.TourPackage", "TourPackage")
                        .WithMany("ConfirmBookings")
                        .HasForeignKey("TourPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourPackage");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Flight", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyNest.SharedKernel.Entities.Airport", "ArrivalFlight")
                        .WithMany("ArrivalAirport")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyNest.SharedKernel.Entities.Baggage", "Baggage")
                        .WithMany("Flights")
                        .HasForeignKey("BaggageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyNest.SharedKernel.Entities.Airport", "DepatureFlight")
                        .WithMany("DepatureAirport")
                        .HasForeignKey("DepatureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("ArrivalFlight");

                    b.Navigation("Baggage");

                    b.Navigation("DepatureFlight");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.HotelImages", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+RoleClaim", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserClaim", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserLogin", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserRole", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Identities.IdentityModel+UserToken", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Identities.IdentityModel+User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Policy", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Flight", "Flight")
                        .WithMany("Policies")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Room", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.RoomImages", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Stopover", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Airport", "StopoverAirport")
                        .WithMany("Stopovers")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlyNest.SharedKernel.Entities.Flight", "Flight")
                        .WithMany("Stopovers")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("StopoverAirport");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.TourPackage", b =>
                {
                    b.HasOne("FlyNest.SharedKernel.Entities.Country", "Country")
                        .WithMany("TourPackages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Airline", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Airport", b =>
                {
                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepatureAirport");

                    b.Navigation("Stopovers");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Baggage", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Country", b =>
                {
                    b.Navigation("TourPackages");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Flight", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("Stopovers");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Hotel", b =>
                {
                    b.Navigation("HotelImages");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.Room", b =>
                {
                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("FlyNest.SharedKernel.Entities.TourPackage", b =>
                {
                    b.Navigation("ConfirmBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
